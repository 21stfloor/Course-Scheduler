# Generated by Django 5.0 on 2024-02-12 08:06

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import schedulerpages.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.CharField(default=schedulerpages.models.id_gen, editable=False, max_length=30, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('firstname', models.CharField(blank=True, max_length=50, null=True)),
                ('middlename', models.CharField(blank=True, max_length=50, null=True)),
                ('lastname', models.CharField(blank=True, max_length=50, null=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
            },
        ),
        migrations.CreateModel(
            name='Departments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department_name', models.CharField(choices=[('TED', 'TEACHER EDUCATION DEPARTMENT'), ('CSD', 'COMPUTER STUDIES DEPARTMENT '), ('ED', 'ENGINEERING DEPARTMENT '), ('ND', 'NURSING DEPARTMENT'), ('TechEntrepD', 'TECHNOLOGY & ENTREPRENEURSHIP DEPARTMENT')], default='TED', max_length=100)),
            ],
            options={
                'verbose_name': 'Department',
                'verbose_name_plural': 'Departments',
                'ordering': ['department_name'],
            },
        ),
        migrations.CreateModel(
            name='Instructor',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('instructor_id', models.CharField(max_length=100, unique=True)),
                ('instructor_name', models.CharField(max_length=100)),
                ('instructor_department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schedulerpages.departments')),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_code', models.CharField(max_length=10, unique=True)),
                ('course_year_block', models.CharField(max_length=100)),
                ('descriptive_title', models.CharField(max_length=1000)),
                ('lecture_units', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('laboratory_units', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_units', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('adviser', models.CharField(max_length=100)),
                ('course_department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schedulerpages.departments')),
            ],
        ),
        migrations.CreateModel(
            name='Rooms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_name', models.CharField(max_length=100)),
                ('room_type', models.CharField(choices=[('Lecture', 'Lecture'), ('Laboratory', 'Laboratory')], default='Lecture', max_length=100)),
                ('room_department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schedulerpages.departments')),
            ],
            options={
                'verbose_name': 'Room',
                'verbose_name_plural': 'Rooms',
                'ordering': ['room_name'],
            },
        ),
        migrations.CreateModel(
            name='Time',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_slot', models.CharField(choices=[('7:00 AM', '7:00 AM'), ('7:30 AM', '7:30 AM'), ('8:00 AM', '8:00 AM'), ('8:30 AM', '8:30 AM'), ('9:00 AM', '9:00 AM'), ('9:30 AM', '9:30 AM'), ('10:00 AM', '10:00 AM'), ('10:30 AM', '10:30 AM'), ('11:00 AM', '11:00 AM'), ('11:30 AM', '11:30 AM'), ('12:00 PM', '12:00 PM'), ('12:30 PM', '12:30 PM'), ('1:00 PM', '1:00 PM'), ('1:30 PM', '1:30 PM'), ('2:00 PM', '2:00 PM'), ('2:30 PM', '2:30 PM'), ('3:00 PM', '3:00 PM'), ('3:30 PM', '3:30 PM'), ('4:00 PM', '4:00 PM'), ('4:30 PM', '4:30 PM'), ('5:00 PM', '5:00 PM'), ('5:30 PM', '5:30 PM'), ('6:00 PM', '6:00 PM'), ('6:30 PM', '6:30 PM'), ('7:00 PM', '7:00 PM')], default='7:00 AM', max_length=10)),
            ],
            options={
                'verbose_name': 'Time Slot',
                'verbose_name_plural': 'Time Slots',
                'ordering': ['time_slot'],
                'unique_together': {('time_slot',)},
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(choices=[('Mon', 'Monday'), ('Tues', 'Tuesday'), ('Wed', 'Wednesday'), ('Thurs', 'Thursday'), ('Fri', 'Friday'), ('Sat', 'Saturday')], default='Mon', max_length=10)),
                ('time_start', models.TimeField()),
                ('time_end', models.TimeField()),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schedulerpages.course')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schedulerpages.rooms')),
                ('instructor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schedulerpages.instructor')),
            ],
            options={
                'verbose_name': 'Schedule',
                'verbose_name_plural': 'Schedules',
                'ordering': ['course', 'instructor', 'room'],
                'unique_together': {('course', 'instructor', 'room')},
            },
        ),
        migrations.CreateModel(
            name='CombinedCourseSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schedulerpages.course')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schedulerpages.rooms')),
                ('time_slot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schedulerpages.time')),
                ('instructor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schedulerpages.instructor')),
            ],
            options={
                'verbose_name': 'Combined Course Schedule',
                'verbose_name_plural': 'Combined Course Schedules',
                'ordering': ['course', 'instructor', 'room', 'time_slot'],
                'unique_together': {('course', 'instructor', 'room', 'time_slot')},
            },
        ),
    ]
